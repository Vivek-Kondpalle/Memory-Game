{"version":3,"sources":["components/Card.js","components/PlayScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","letter","flippedCard","className","PlayScreen","useState","openedCard","setOpenedCard","isMatched","setIsMatched","turns","setTurns","cardLetter","id","pair","i","length","j","Math","floor","random","shuffle","pairOfLetters","useEffect","firstCard","secondCard","setTimeout","prev","map","card","index","includes","onClick","opened","flipCard","App","window","onbeforeunload","event","e","preventDefault","returnValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAiBeA,EAfF,SAACC,GAAW,IACbC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,YAChB,OACI,qBAAKC,UAAS,oBAAeD,GAAe,WAA5C,SACA,sBAAKC,UAAS,kBAAd,UACI,qBAAKA,UAAU,oBAEf,qBAAKA,UAAU,iBAAf,SACI,4BAAIF,YCuELG,EA9EI,WAAO,IAAD,EAEeC,mBAAS,IAFxB,mBAEdC,EAFc,KAEFC,EAFE,OAGaF,mBAAS,IAHtB,mBAGdG,EAHc,KAGHC,EAHG,OAIKJ,mBAAS,GAJd,mBAIdK,EAJc,KAIPC,EAJO,KAMfC,EAAa,CACf,CAAEC,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,KACjB,CAAEY,GAAI,EAAGZ,OAAQ,MAdA,EAiBqBI,oBAAS,kBAGnD,SAAiBO,GAEb,IADA,IAAME,EAAI,sBAAOF,GAAP,YAAsBA,IACvBG,EAAID,EAAKE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACtC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADF,EAGjB,CAACD,EAAKG,GAAIH,EAAKC,IAAnCD,EAAKC,GAHgC,KAG5BD,EAAKG,GAHuB,KAK1C,OAAOH,EAV8CO,CAAQT,MAjB5C,mBAiBdU,EAjBc,UAoDrB,OAhBAC,qBAAU,WAEN,IAAMC,EAAYF,EAAchB,EAAW,IACrCmB,EAAaH,EAAchB,EAAW,IAEpCmB,GAAcD,EAAUX,KAAOY,EAAWZ,IAC1CJ,EAAa,GAAD,mBAAKD,GAAL,CAAgBgB,EAAUX,MAGhB,IAAtBP,EAAWU,SACXU,YAAW,kBAAMf,GAAS,SAAAgB,GAAI,OAAIA,EAAO,OAAI,KAC7CD,YAAW,kBAAMnB,EAAc,MAAK,QAG7C,CAACD,IAGA,sBAAKH,UAAU,MAAf,UACI,oBAAGA,UAAU,QAAb,oBAA6BO,KAC7B,qBAAKP,UAAU,QAAf,SACKmB,EAAcM,KAAI,SAACC,EAAMC,GACtB,IAAI5B,EAOJ,OANAA,GAAc,EAEXI,EAAWU,OAAS,IACfV,EAAWyB,SAASD,KAAQ5B,GAAc,GAC1CM,EAAUuB,SAASF,EAAKhB,MAAKX,GAAc,IAG/C,qBAEI8B,QAAS,kBArChB,SAACF,GACTxB,EAAWyB,SAASD,IACrBvB,GAAc,SAAA0B,GAAM,4BAAQA,GAAR,CAAgBH,OAmCLI,CAASJ,IAF5B,SAII,cAAC,EAAD,CAAM7B,OAAQ4B,EAAK5B,OAAQC,YAAaA,KAHnC4B,YCjDlBK,MAjBf,WAUE,OATAC,OAAOC,eAAiB,SAACC,GACvB,IAAMC,EAAID,GAASF,OAAOE,MAM1B,OAJAC,EAAEC,iBACED,IACFA,EAAEE,YAAc,IAEX,IAGP,8BACE,cAAC,EAAD,OCHSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d53ece9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = (props) => {\r\n    const { letter, flippedCard } = props\r\n    return (\r\n        <div className={`flip-card ${flippedCard && 'flipped'}`}>\r\n        <div className={`flip-card-inner`}>\r\n            <div className=\"flip-card-front\">\r\n            </div>\r\n            <div className=\"flip-card-back\">\r\n                <p>{letter}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React, { useState, useEffect } from 'react'\r\nimport Card from './Card'\r\n\r\nconst PlayScreen = () => {\r\n\r\n    const [openedCard, setOpenedCard] = useState([])\r\n    const [isMatched, setIsMatched] = useState([])\r\n    const [turns, setTurns] = useState(0)\r\n\r\n    const cardLetter = [\r\n        { id: 1, letter: 'A' },\r\n        { id: 2, letter: 'B' },\r\n        { id: 3, letter: 'C' },\r\n        { id: 4, letter: 'D' },\r\n        { id: 5, letter: 'E' },\r\n        { id: 6, letter: 'F' },\r\n        { id: 7, letter: 'G' },\r\n        { id: 8, letter: 'H' },\r\n    ]\r\n\r\n    const [pairOfLetters, setPairOfLetters] = useState(() => shuffle(cardLetter))\r\n\r\n\r\n    function shuffle(cardLetter) {\r\n        const pair = [...cardLetter, ...cardLetter]\r\n        for (let i = pair.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n\r\n            [pair[i], pair[j]] = [pair[j], pair[i]]\r\n        }\r\n        return pair\r\n    }\r\n\r\n    const flipCard = (index) => {\r\n        if(!(openedCard.includes(index))){\r\n            setOpenedCard(opened => [...opened, index])\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        const firstCard = pairOfLetters[openedCard[0]];\r\n        const secondCard = pairOfLetters[openedCard[1]];\r\n        \r\n            if (secondCard && firstCard.id === secondCard.id) {\r\n                setIsMatched([...isMatched, firstCard.id]);\r\n            }\r\n    \r\n            if (openedCard.length === 2) {\r\n                setTimeout(() => setTurns(prev => prev + 1), 300)\r\n                setTimeout(() => setOpenedCard([]), 1000)\r\n            };\r\n        \r\n    }, [openedCard])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <p className=\"turns\">Turns: {turns}</p>\r\n            <div className=\"cards\">\r\n                {pairOfLetters.map((card, index) => {\r\n                    let flippedCard;\r\n                    flippedCard = false;\r\n\r\n                    if(openedCard.length < 3){\r\n                        if (openedCard.includes(index)) flippedCard = true;\r\n                        if (isMatched.includes(card.id)) flippedCard = true;\r\n                    }\r\n                    return (\r\n                        <div\r\n                            key={index}\r\n                            onClick={() => flipCard(index)}>\r\n                            \r\n                            <Card letter={card.letter} flippedCard={flippedCard} />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayScreen\r\n","import './App.css';\nimport PlayScreen from './components/PlayScreen';\n\nfunction App() {\n  window.onbeforeunload = (event) => {\n    const e = event || window.event;\n\n    e.preventDefault();\n    if (e) {\n      e.returnValue = '';\n    }\n    return '';\n  };\n  return (\n    <div>\n      <PlayScreen />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}